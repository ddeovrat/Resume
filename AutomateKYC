using System;
using System.Net.Http;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using DocumentFormat.OpenXml.Packaging;
using OpenXmlPowerTools;
using System.Xml.Linq;
using System.IO;
using Azure;
using Azure.AI.FormRecognizer.DocumentAnalysis;
using Azure.AI.OpenAI;
using Azure.Search.Documents;
using Azure.Search.Documents.Models;
using Azure.Search.Documents.Indexes;
using Azure.Search.Documents.Indexes.Models;
using System.Text.Json;

class Program
{
    static async Task Main(string[] args)
    {
        var url = "YOUR_WEBSITE_URL";
        var searchServiceName = "YOUR_SEARCH_SERVICE_NAME";
        var searchIndexName = "YOUR_SEARCH_INDEX_NAME";
        var searchApiKey = "YOUR_SEARCH_API_KEY";
        var openAiEndpoint = "YOUR_OPENAI_ENDPOINT";
        var openAiApiKey = "YOUR_OPENAI_API_KEY";

        var jsonContent = await FetchDataFromWebsite(url);
        var parsedJson = ParseJson(jsonContent);
        var searchResults = await SearchAsync(searchServiceName, searchIndexName, searchApiKey, parsedJson.ToString());
        var openAiResponse = await GenerateResponseAsync(openAiEndpoint, openAiApiKey, searchResults);
        CreateDocument(openAiResponse);
    }

    public static async Task<string> FetchDataFromWebsite(string url)
    {
        using (var client = new HttpClient())
        {
            var response = await client.GetAsync(url);
            response.EnsureSuccessStatusCode();
            return await response.Content.ReadAsStringAsync();
        }
    }

    public static JObject ParseJson(string json)
    {
        return JObject.Parse(json);
    }

    public static async Task<SearchResults<SearchDocument>> SearchAsync(string serviceName, string indexName, string apiKey, string query)
    {
        var endpoint = new Uri($"https://{serviceName}.search.windows.net");
        var credential = new AzureKeyCredential(apiKey);
        var client = new SearchClient(endpoint, indexName, credential);

        var options = new SearchOptions
        {
            IncludeTotalCount = true,
            Size = 5
        };
        return await client.SearchAsync<SearchDocument>(query, options);
    }

    public static async Task<string> GenerateResponseAsync(string endpoint, string apiKey, SearchResults<SearchDocument> searchResults)
    {
        var client = new OpenAIClient(new Uri(endpoint), new AzureKeyCredential(apiKey));
        var prompt = "Based on the following search results, generate a response:\n";

        foreach (var result in searchResults.GetResults())
        {
            prompt += result.Document["content"] + "\n";
        }

        var completionOptions = new CompletionsOptions
        {
            MaxTokens = 150,
            Temperature = 0.7
        };
        var response = await client.GetCompletionsAsync("your-deployment-name", prompt, completionOptions);
        return response.Value.Choices[0].Text;
    }

    public static void CreateDocument(string extractedData)
    {
        using (var wordDocument = WordprocessingDocument.Create("output.docx", DocumentFormat.OpenXml.WordprocessingDocumentType.Document))
        {
            var mainPart = wordDocument.AddMainDocumentPart();
            mainPart.Document = new DocumentFormat.OpenXml.Wordprocessing.Document();
            mainPart.Document.Body = new DocumentFormat.OpenXml.Wordprocessing.Body();

            var doc = new XDocument(
                new XElement(W.body,
                    new XElement(W.p,
                        new XElement(W.r,
                            new XElement(W.t, extractedData))
                    )
                )
            );

            var wmlDoc = new WmlDocument("output.docx", doc);
            var settings = new WmlToHtmlConverterSettings { PageTitle = "Extracted Data" };
            var htmlDoc = WmlToHtmlConverter.ConvertToHtml(wmlDoc, settings);
            File.WriteAllText("output.html", htmlDoc.ToString(SaveOptions.DisableFormatting));
        }
    }
}
